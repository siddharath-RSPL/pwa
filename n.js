// booking.controller.js
const db = require('../models');
const Booking = db.bookings;
exports.bookMeal = async (req, res) => {
  const employeeId = req.body.employeeId;
  const mealId = req.body.mealId;
  const bookingDateStart = new Date(req.body.bookingDateStart);
  const bookingDateEnd = new Date(req.body.bookingDateEnd);
  const numCoupons = req.body.numCoupons;
  const notes = req.body.notes;
  // Generate coupon numbers for the date range
  const coupons = [];
  for (let i = 0; i < numCoupons; i++) {
    const couponNumber = generateCouponNumber();
    coupons.push(couponNumber);
  }
  // Save a new booking record for the date range
  const booking = new Booking({
    employeeId: employeeId,
    mealId: mealId,
    bookingDateStart: bookingDateStart,
    bookingDateEnd: bookingDateEnd,
    numCoupons: numCoupons,
    couponNumbers: coupons,
    notes: notes
  });
  await booking.save();
  res.send({ message: "Booking successful." });
};
function generateCouponNumber() {
  // Generate a random alphanumeric string as the coupon number
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let couponNumber = '';
  for (let i = 0; i < 8; i++) {
    const index = Math.floor(Math.random() * chars.length);
    couponNumber += chars[index];
  }
  return couponNumber;
}














const Sequelize = require('sequelize');
const moment = require('moment');
const PREFIX = "rspl"; // Constant prefix string
let currentYear = moment().format('YYYY'); // Get the current year
let serialNumber = 1; // Initialize the serial number
// Create Sequelize connection

// Connect to Sequelize
sequelize.authenticate().then(() => {
  console.log('Connected to Sequelize!');
  // Example query to get the last coupon number from the booking table
  Booking.findOne({
    order: [['id', 'DESC']]
  }).then((result) => {
    if (result) {
      // If there is a result, extract the serial number and increment it
      const lastCouponNumber = result.coupon_number;
      const lastSerialNumber = parseInt(lastCouponNumber.slice(-4));
      serialNumber = lastSerialNumber + 1;
    }
    // Example loop to generate coupons for each booking date
    const bookingDates = [
      new Date('2023-03-01'),
      new Date('2023-03-02'),
      new Date('2023-03-03')
    ];
    bookingDates.forEach(date => {
      const coupon = generateCoupon(date);
      console.log(`Coupon for ${moment(date).format('YYYY-MM-DD')}: ${coupon}`);
      // Example query to insert the new coupon into the booking table
      Booking.create({
        booking_date: date,
        coupon_number: coupon
      }).then(() => {
        console.log(`Inserted coupon ${coupon} into booking table`);
      }).catch((err) => {
        console.error(err);
      });
    });
  }).catch((err) => {
    console.error(err);
  });
});
// Example function to generate a coupon number with the desired format
function generateCoupon(date) {
  // Format the serial number with leading zeros
  const serialNumberFormatted = serialNumber.toString().padStart(4, '0');
  // Concatenate the prefix, current year and formatted serial number to generate the coupon number
  const couponNumber = `${PREFIX}-${currentYear}-${serialNumberFormatted}`;
  // Increment the serial number for the next coupon
  serialNumber++;
  return couponNumber;
}

RSPL20231001









const Booking = require('./models/booking'); // Import your Booking model
const coupons = ['coupon1', 'coupon2', 'coupon3']; // Your coupon array
const dates = ['2023-03-01', '2023-03-02', '2023-03-03']; // Your dates array
const employees = ['employee1', 'employee2', 'employee3']; // Your employee array
let couponIndex = 0; // Initialize the index of the current coupon
const bookings = []; // An array to store the booking objects
// Loop through each employee and date to create a booking object for each combination
employees.forEach(employee => {
  dates.forEach(date => {
    const booking = new Booking({
      coupon_number: coupons[couponIndex],
      date: date,
      username: employee,
      booking_id: 0 // The ID will be automatically generated by Sequelize
    });
    bookings.push(booking); // Add the booking object to the array
    couponIndex = (couponIndex + 1) % coupons.length; // Increment the index of the current coupon and wrap around to the start of the array if necessary
  });
});
// Use bulkCreate() method to insert all the booking objects in one go
Booking.bulkCreate(bookings);


















const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'mysql',
});
const Booking = sequelize.define('Booking', {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  mealType: {
    type: DataTypes.ENUM('lunch', 'dinner'),
    allowNull: false,
  },
  bookingDate: {
    type: DataTypes.DATEONLY,
    allowNull: false,
  },
  // Other fields...
}, {
  hooks: {
    async beforeBulkCreate(bookings) {
      // Group the bookings by mealType and bookingDate
      const groupedBookings = {};
      bookings.forEach((booking) => {
        const { mealType, bookingDate } = booking;
        const key = `${mealType}-${bookingDate}`;
        if (!groupedBookings[key]) {
          groupedBookings[key] = [];
        }
        groupedBookings[key].push(booking);
      });
      // Validate each group of bookings separately
      const errors = [];
      for (const [key, bookings] of Object.entries(groupedBookings)) {
        const [mealType, bookingDate] = key.split('-');
        const existingBookings = await Booking.findAll({
          where: {
            mealType,
            bookingDate,
          },
        });
        bookings.forEach((booking) => {
          const isDuplicate = existingBookings.some((existingBooking) =>
            existingBooking.username === booking.username
          );
          if (isDuplicate) {
            errors.push(new Error(`Duplicate booking for mealType=${mealType} and bookingDate=${bookingDate}`));
          }
        });
      }
      if (errors.length > 0) {
        throw new Sequelize.ValidationError(errors);
      }
    },
  },
});



emp id - 2729
emp name - monika
depart
total meal booking 
meal dates = "1,2,3,4,5,6,7,8,9" 
meal type 

app 
emp id - 2729
emp name - monika
depart
total meal booking 
meal dates = "1,2,3,4,5,6,7,8,9" 
meal type 























const moment = require('moment');
const Sequelize = require('sequelize');
const Op = Sequelize.Op;
// Assuming the start date and end date are in ISO date format, e.g. '2023-03-01'
const startDate = moment(req.body.startDate);
const endDate = moment(req.body.endDate);
// Get an array of dates between the start and end dates, inclusive
const dateRange = [];
while (startDate <= endDate) {
  dateRange.push(startDate.format('YYYY-MM-DD'));
  startDate.add(1, 'days');
}
// Exclude weekends (Saturday and Sunday)
const weekdays = dateRange.filter(date => {
  const dayOfWeek = moment(date).day();
  return dayOfWeek !== 0 && dayOfWeek !== 6;
});
// Exclude configured dates using a separate table in the database
const configuredDates = await ConfiguredDates.findAll({
  where: {
    startDate: {
      [Op.lte]: endDate // Configured date range overlaps with the given date range
    },
    endDate: {
      [Op.gte]: startDate
    }
  }
});
// Create a set of all excluded dates from the configured dates
const excludedDates = new Set();
configuredDates.forEach(configuredDate => {
  const configuredStartDate = moment(configuredDate.startDate);
  const configuredEndDate = moment(configuredDate.endDate);
  const configuredRange = [];
  while (configuredStartDate <= configuredEndDate) {
    configuredRange.push(configuredStartDate.format('YYYY-MM-DD'));
    configuredStartDate.add(1, 'days');
  }
  configuredRange.forEach(date => excludedDates.add(date));
});
// Filter out excluded dates from the available dates
const availableDates = weekdays.filter(date => !excludedDates.has(date));
// Now you can loop over the availableDates array and create a booking record for each date
for (const date of availableDates) {
  // Create booking record for this date
  await Booking.create({
    userId: req.user.id,
    mealType: req.body.mealType,
    bookingDate: date
  });
}





























































const moment = require('moment');
// Assume startDate and endDate are Moment.js objects representing the start and end dates of the booking range
const startDate = moment('2023-03-01');
const endDate = moment('2023-06-30');
// Loop over each month in the date range and create a new record for each month
while (startDate.isSameOrBefore(endDate, 'month')) {
  const booking = await MealBooking.create({
    userId: userId,
    mealType: mealType,
    selectedDates: [] // Start with an empty array of selected dates
  });
  // Add each date in the current month to the selectedDates array
  const firstDayOfMonth = startDate.clone().startOf('month');
  const lastDayOfMonth = startDate.clone().endOf('month');
  for (let date = firstDayOfMonth; date.isSameOrBefore(lastDayOfMonth); date.add(1, 'day')) {
    booking.selectedDates.push(date.format('YYYY-MM-DD'));
  }
  // Save the updated booking record
  await booking.save();
  // Move to the next



















